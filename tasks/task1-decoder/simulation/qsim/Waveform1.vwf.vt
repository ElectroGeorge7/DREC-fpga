// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/12/2022 02:20:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN1;
reg IN2;
reg IN3;
reg IN4;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.IN4(IN4)
);
initial 
begin 
#1000000 $finish;
end 

// IN1
initial
begin
	repeat(7)
	begin
		IN1 = 1'b0;
		IN1 = #50000 1'b1;
		# 50000;
	end
	IN1 = 1'b0;
	IN1 = #50000 1'b1;
	IN1 = #49000 1'b0;
end 

// IN2
initial
begin
	repeat(3)
	begin
		IN2 = 1'b0;
		IN2 = #100000 1'b1;
		# 100000;
	end
	IN2 = 1'b0;
	IN2 = #100000 1'b1;
	IN2 = #99000 1'b0;
end 

// IN3
initial
begin
	IN3 = 1'b0;
	IN3 = #200000 1'b1;
	IN3 = #200000 1'b0;
	IN3 = #200000 1'b1;
	IN3 = #199000 1'b0;
end 

// IN4
initial
begin
	IN4 = 1'b0;
	IN4 = #400000 1'b1;
	IN4 = #399000 1'b0;
end 
endmodule

